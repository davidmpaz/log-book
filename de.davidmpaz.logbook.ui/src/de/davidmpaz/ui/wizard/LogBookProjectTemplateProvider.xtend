/*
 * generated by Xtext 2.29.0
 */
package de.davidmpaz.ui.wizard

import com.google.inject.Inject
import de.davidmpaz.importer.ITimeEntriesImporter
import de.davidmpaz.importer.RedmineTimeEntriesImporter
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.serializer.ISerializer
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*
import de.davidmpaz.LogBookStandaloneSetup
import java.text.SimpleDateFormat
import java.util.Date

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class LogBookProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new LogBookProject]
	}
}

@ProjectTemplate(
	label="Log Book", 
	icon="project_template.png", 
	description="<p><b>Log Book</b></p><p>This is a template project for LogBook. You can set the parameters to modify the content file is created in.</p>")
final class LogBookProject {
	@Inject ISerializer serializer;

	ITimeEntriesImporter importer

	val advanced = check("Advanced:", false)
	val advancedGroup = group("Management tool used")
	val name = combo(
		'Name:', 
		#['None', 'Redmine'], 
		'The software used to manage time booking. Time entry file path must be a JSON response from /time_entries.json end point.', 
		advancedGroup
	)
	val path = text(
		'Previous Time Entry File:', 
		'', 
		'The file used to import time entries from. Depends of the time management tool used', 
		advancedGroup
	)

	override protected updateVariables() {
		name.enabled = advanced.value
		path.enabled = advanced.value
		if (!advanced.value) {
			name.value = ''
			path.value = ''
		}
	}

	override protected validate() {
		val file = new File(path.value)

		if (path.value.equals(''))
			return null

		if(!path.value.equals('') && !file.exists)
			new Status(ERROR, "Wizard", "'" + path + "' file does not exist.")
	}

	override generateProjects(IProjectGenerator generator) {
		val content = getModelText()
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "src"
			addFile('''src/book.logtime''', content)
		])
	}

	private def String getModelText() {
		val injector = new LogBookStandaloneSetup().createInjectorAndDoEMFRegistration()
		serializer = injector.getInstance(ISerializer)

		var fileContent = ''
		var text = defaultText
		if(name.value == 'Redmine') {
			fileContent = Files.readString(Path.of(path.value))
			importer = new RedmineTimeEntriesImporter() as ITimeEntriesImporter
			text = serializer.serialize(importer.getModelFrom(fileContent))
		}
		//if(name.value.equals('--'))
			// another importer strategy
			// TODO implement Strategy when this happen
		
		text
	}

	private def getDefaultText() {
		val date = new SimpleDateFormat("dd.MM.yyyy").format(new Date()).toString
		var text = '/**\n * Add days entries to your Log book\n */\n'
		text += 'day ' + date + ' {}\n'
	}
}
