/*
 * generated by Xtext 2.29.0
 */
package de.davidmpaz.formatting2

import de.davidmpaz.logBook.LogEntry
import de.davidmpaz.logBook.Model
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.davidmpaz.logBook.Task
import de.davidmpaz.logBook.Date
import de.davidmpaz.logBook.NumberLiteral
import de.davidmpaz.logBook.LogBookPackage

class LogBookFormatter extends AbstractFormatter2 {

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (logEntry : model.entries) {
			logEntry.format
		}
	}

	def dispatch void format(LogEntry logEntry, extension IFormattableDocument document) {
		val open = logEntry.regionFor.keyword("{")
		val close = logEntry.regionFor.keyword("}")
		open.append[newLine]
		close.prepend[newLine]
		interior(open, close)[indent]
		logEntry.date.format
		for (task : logEntry.tasks) {
			task.format
		}
	}

	def dispatch void format(Task task, extension IFormattableDocument document) {
		task.regionFor.keyword("#").surround[noSpace]
		task.time.format
		task.regionFor.feature(LogBookPackage.Literals.TASK__ACTIVITY).surround[oneSpace]
		task.append[newLine]
	}
	
	def dispatch void format(Date date, extension IFormattableDocument document) {
		date.surround[oneSpace]
	}
	
	def dispatch void format(NumberLiteral nl, extension IFormattableDocument document) {
		nl.surround[oneSpace]
	}
}
